<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://nickhuangcyh.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nickhuangcyh.github.io/blog/" rel="alternate" type="text/html" /><updated>2025-05-11T07:37:23+00:00</updated><id>https://nickhuangcyh.github.io/blog/feed.xml</id><title type="html">Nick’s Blog</title><subtitle>An amazing website.</subtitle><author><name>Nick Huang</name></author><entry><title type="html">🚀 如何使用 Excalidraw AI 快速生成專業級圖表，提升工作效率！</title><link href="https://nickhuangcyh.github.io/blog/ai%20tools/visualization/productivity/ai-tools-excalidraw-chart-guide/" rel="alternate" type="text/html" title="🚀 如何使用 Excalidraw AI 快速生成專業級圖表，提升工作效率！" /><published>2025-03-15T08:30:00+00:00</published><updated>2025-03-15T08:30:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/ai%20tools/visualization/productivity/ai-tools-excalidraw-chart-guide</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/ai%20tools/visualization/productivity/ai-tools-excalidraw-chart-guide/"><![CDATA[<h2 id="-前言">📢 <strong>前言</strong></h2>

<p>在現代工作中，無論是 <strong>工程師、設計師、商業分析師還是教育工作者</strong>，都需要製作圖表來視覺化資訊。然而，傳統的繪圖工具通常需要手動拖拉元件、調整線條，既耗時又繁瑣。</p>

<p>現在，透過 <strong>Excalidraw AI</strong>，我們可以透過簡單的文字描述，自動生成 <strong>流程圖、心智圖、技術架構圖、商業流程圖</strong> 等，大幅提高工作效率！</p>

<p>本文將介紹 Excalidraw AI 的強大功能，並透過一個 <strong>MQTT 通訊協定流程圖</strong>，展示如何快速生成專業級圖表。</p>

<hr />

<h2 id="-為什麼選擇-excalidraw-ai">🎯 <strong>為什麼選擇 Excalidraw AI？</strong></h2>

<p><strong>Excalidraw</strong> 是一款開源的 <strong>手繪風格繪圖工具</strong>，而 <strong>Excalidraw AI</strong> 則加入了 <strong>AI 自動繪圖功能</strong>，只需輸入簡單的文字描述，它就能智能識別內容並自動生成圖表。</p>

<h3 id="-excalidraw-ai-的主要優勢">✅ <strong>Excalidraw AI 的主要優勢</strong></h3>

<ul>
  <li><strong>🚀 快速生成圖表</strong>：無需手動繪製，只需輸入描述，即可獲得完整圖表。</li>
  <li><strong>📊 支援多種圖表類型</strong>：流程圖、心智圖、技術架構圖、商業圖表等應有盡有。</li>
  <li><strong>✏️ 可編輯與自訂</strong>：生成後的圖表仍然可以手動調整，符合個人需求。</li>
  <li><strong>🆓 開源且免費</strong>：可直接在線使用，無需安裝額外軟體。</li>
</ul>

<hr />

<h2 id="-如何使用-excalidraw-ai-生成專業級圖表">🛠 <strong>如何使用 Excalidraw AI 生成專業級圖表？</strong></h2>

<h3 id="1️⃣-進入-excalidraw-ai">1️⃣ <strong>進入 Excalidraw AI</strong></h3>

<p>首先，打開 <strong><a href="https://excalidraw.com/">Excalidraw AI 官方網站</a></strong>。
選取右上角 <code class="language-plaintext highlighter-rouge">更多工具</code> -&gt; <code class="language-plaintext highlighter-rouge">文字轉圖表 AI</code></p>

<p><img src="/blog/assets/images/ai_tools_excalidraw_1.png" alt="ai_tools_excalidraw_1" /></p>

<h3 id="2️⃣-輸入文字描述">2️⃣ <strong>輸入文字描述</strong></h3>

<p>在文字輸入框內，輸入以下描述來生成一個 <strong>MQTT 通訊協定流程圖</strong>：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Title: Client-Client Communication via Server
1. Phone and Device connect to the MQTT Broker
    * Both connect to the same MQTT Broker.
2. Phone subscribes to the Device's status topic
    * Phone subscribes to Device's status (e.g., smartlight/status).
3. Device reports its status
    * Device publishes its status (e.g., light on/off) to the topic.
4. Phone receives status updates
    * Phone receives and updates the status (e.g., light turned on/off).
5. Phone sends control commands to Device
    * Phone sends control commands (e.g., turn on/off) to the topic.
6. Device executes commands and updates status
    * Device executes the command and updates the status.
7. Phone receives the new status and updates UI
    * Phone receives new status and updates the interface.
8. Device sends a Last Will and Testament (LWT) message if it disconnects
    * If Device disconnects, an LWT message (e.g., "status": "offline") is sent.
9. Phone disconnects from the Broker
    * Phone disconnects after completing the tasks.
</code></pre></div></div>

<p><img src="/blog/assets/images/ai_tools_excalidraw_2.png" alt="ai_tools_excalidraw_2" /></p>

<h3 id="3️⃣-ai-自動生成圖表">3️⃣ <strong>AI 自動生成圖表</strong></h3>

<p>Excalidraw AI 會根據你的描述，自動生成對應的流程圖，你可以進一步 <strong>調整節點、線條</strong>，使其更加清晰。</p>

<p><img src="/blog/assets/images/ai_tools_excalidraw_3.jpg" alt="ai_tools_excalidraw_3" /></p>

<hr />

<h2 id="-excalidraw-ai-的應用場景">🎯 <strong>Excalidraw AI 的應用場景</strong></h2>

<h3 id="-工程與技術領域">👨‍💻 <strong>工程與技術領域</strong></h3>

<ul>
  <li><strong>技術架構圖</strong>：快速繪製 API 交互、系統架構、數據流圖。</li>
  <li><strong>網絡通訊流程圖</strong>：展示伺服器、客戶端、協議數據交換等。</li>
</ul>

<h3 id="-設計與創意領域">🎨 <strong>設計與創意領域</strong></h3>

<ul>
  <li><strong>手繪風圖表</strong>：適合設計師、創意工作者製作具草圖風格的圖形。</li>
  <li><strong>介面流程圖</strong>：設計產品 UX 流程，優化使用者體驗。</li>
</ul>

<h3 id="-商業與策略領域">📊 <strong>商業與策略領域</strong></h3>

<ul>
  <li><strong>商業流程圖</strong>：企業管理人員可用來規劃工作流程、業務運作。</li>
  <li><strong>專案管理視覺圖</strong>：視覺化專案規劃，提升團隊溝通效率。</li>
</ul>

<h3 id="-教育與學習領域">📚 <strong>教育與學習領域</strong></h3>

<ul>
  <li><strong>心智圖</strong>：幫助學生、研究人員整理思路，快速搭建概念結構。</li>
  <li><strong>教學示意圖</strong>：教師與講師可利用它來視覺化各種知識點，提高學習效果。</li>
</ul>

<hr />

<h2 id="-ai-繪圖工具如何提升你的工作效率">⚡ <strong>AI 繪圖工具如何提升你的工作效率？</strong></h2>

<ul>
  <li><strong>🚀 省時省力</strong>：比起傳統手動繪製，AI 只需數秒就能生成完整圖表。</li>
  <li><strong>🖥 無痛修改</strong>：AI 生成後的圖表仍可手動微調，確保符合需求。</li>
  <li><strong>📈 提高專業度</strong>：技術文件、商業簡報、教學內容的視覺效果瞬間提升。</li>
  <li><strong>🆓 免費使用</strong>：無需額外購買軟體，開源工具 Excalidraw 讓每個人都能輕鬆使用。</li>
</ul>

<hr />

<h2 id="-結論">🔥 <strong>結論</strong></h2>

<p>透過 <strong>Excalidraw AI</strong>，不僅 <strong>工程師</strong> 可以快速將 <strong>技術架構、通訊協議、數據流設計</strong> 轉換為視覺化圖表，<strong>設計師、教師、商業分析師</strong> 也能利用它來 <strong>創建手繪風圖表、心智圖、商業流程圖</strong>，極大提升創作與溝通效率。</p>

<p>如果你經常需要製作各類視覺化圖表，不妨試試 <strong>Excalidraw AI</strong>，讓 AI 幫你完成繁瑣的圖表繪製工作，讓你的專案更高效、更專業！</p>

<hr />

<p>🔗 <strong>延伸閱讀</strong></p>

<ul>
  <li><a href="https://excalidraw.com/">Excalidraw 官方網站</a></li>
  <li><a href="https://github.com/excalidraw/excalidraw">Excalidraw AI GitHub 專案</a></li>
</ul>]]></content><author><name>Nick Huang</name></author><category term="AI Tools" /><category term="Visualization" /><category term="Productivity" /><category term="Excalidraw" /><category term="AI Drawing" /><category term="Diagram Tool" /><category term="Flowchart" /><category term="Mind Map" /><summary type="html"><![CDATA[使用 Excalidraw AI 只需輸入文字描述，即可快速生成流程圖、技術架構圖、心智圖等，提升工作效率！]]></summary></entry><entry><title type="html">Setup Development Environment on a New macOS</title><link href="https://nickhuangcyh.github.io/blog/setup%20guide/setup-development-environment-on-a-new-macos/" rel="alternate" type="text/html" title="Setup Development Environment on a New macOS" /><published>2025-01-11T07:00:00+00:00</published><updated>2025-01-11T07:00:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/setup%20guide/setup-development-environment-on-a-new-macos</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/setup%20guide/setup-development-environment-on-a-new-macos/"><![CDATA[<h1 id="setup-development-environment-on-a-new-macos">Setup Development Environment on a New macOS</h1>

<h2 id="install-homebrew">Install <a href="https://brew.sh/index_zh-tw">Homebrew</a></h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="common-issue">Common Issue</h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: /opt/homebrew/bin is not <span class="k">in </span>your PATH
</code></pre></div></div>

<p>To resolve this, add Homebrew’s bin directory to your PATH:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.zshrc
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/opt/homebrew/bin:<span class="nv">$PATH</span>
:wq
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<p>Refer to <a href="https://stackoverflow.com/questions/65487249/getting-a-warning-when-installing-homebrew-on-macos-big-sur-m1-chip">this StackOverflow thread</a> for more details.</p>

<h2 id="install-git">Install Git</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git
</code></pre></div></div>

<h3 id="setup-git-email--name"><a href="https://stackoverflow.com/questions/46941346/how-to-know-the-git-username-and-email-saved-during-configuration/53940971">Setup Git Email &amp; Name</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.email <span class="s2">"you@example.com"</span>
git config <span class="nt">--global</span> user.name <span class="s2">"Your Name"</span>
</code></pre></div></div>

<h3 id="setup-git-alias"><a href="https://stackoverflow.com/questions/2553786/how-do-i-alias-commands-in-git">Setup Git Alias</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.co checkout
git config <span class="nt">--global</span> alias.ci commit
git config <span class="nt">--global</span> alias.st status
git config <span class="nt">--global</span> alias.br branch
</code></pre></div></div>

<h2 id="install-iterm2">Install <a href="https://formulae.brew.sh/cask/iterm2">iTerm2</a></h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew tap homebrew/cask
brew <span class="nb">install</span> <span class="nt">--cask</span> iterm2
</code></pre></div></div>

<p>Switch from the default Terminal to iTerm2.</p>

<h2 id="iterm2--zsh-setup">iTerm2 + Zsh Setup</h2>

<h3 id="install-zsh">Install <a href="https://formulae.brew.sh/formula/zsh#default">Zsh</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>zsh
</code></pre></div></div>

<h3 id="install-oh-my-zsh">Install <a href="https://ohmyz.sh/#install">Oh-My-Zsh</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="setup-colors">Setup Colors</h3>

<p>Navigate to Preferences -&gt; Profiles -&gt; Colors -&gt; Select ‘Solarized’.</p>

<h3 id="install-fonts">Install Fonts</h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew tap homebrew/cask-fonts
brew search font-meslo-lg-nerd-font
brew <span class="nb">install</span> <span class="nt">--cask</span> font-meslo-lg-nerd-font
</code></pre></div></div>

<p>Set your terminal font to <code class="language-plaintext highlighter-rouge">font-meslo-lg-nerd-font</code> in Preferences.</p>

<h3 id="install-powerlevel10k-theme">Install <a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a> Theme</h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.oh-my-zsh/custom</span><span class="k">}</span>/themes/powerlevel10k
</code></pre></div></div>

<p>Update your <code class="language-plaintext highlighter-rouge">~/.zshrc</code> to use Powerlevel10k:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"powerlevel10k/powerlevel10k"</span>
</code></pre></div></div>

<p>Run the following to configure the theme:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p10k configure
</code></pre></div></div>

<h3 id="install-zsh-syntax-highlighting">Install <a href="https://github.com/zsh-users/zsh-syntax-highlighting">Zsh-Syntax-Highlighting</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div></div>

<p>Activate the plugin in <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>... zsh-syntax-highlighting<span class="o">)</span>
</code></pre></div></div>

<h3 id="install-zsh-autosuggestions">Install <a href="https://github.com/zsh-users/zsh-autosuggestions">Zsh-Autosuggestions</a></h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div></div>

<p>Activate the plugin in <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>... zsh-autosuggestions<span class="o">)</span>
</code></pre></div></div>

<p>Restart your terminal to apply changes.</p>

<h2 id="ios-environment-install-xcode">iOS Environment: Install Xcode</h2>

<h3 id="install-xcodes-tool">Install Xcodes Tool</h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>robotsandpencils/made/xcodes
</code></pre></div></div>

<h3 id="common-issue-1">Common Issue</h3>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: terminated<span class="o">(</span>72<span class="o">)</span>: /usr/bin/xcrun <span class="nt">--sdk</span> macosx <span class="nt">--find</span> xctest output:
    xcrun: error: unable to find utility <span class="s2">"xctest"</span>, not a developer tool or <span class="k">in </span>PATH
</code></pre></div></div>

<p>Refer to <a href="https://github.com/RobotsAndPencils/xcodes/issues/148">this GitHub issue</a> for resolution.</p>

<h3 id="alternative-use-xcodesapp">Alternative: Use XcodesApp</h3>

<p>If issues persist, download Xcode via the <a href="https://apps.apple.com/">App Store</a>.</p>

<h2 id="install-jetbrains-toolbox">Install JetBrains Toolbox</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install</span> <span class="nt">--cask</span> jetbrains-toolbox
</code></pre></div></div>

<p>Use JetBrains Toolbox to manage IDEs like Android Studio, IntelliJ IDEA, and PyCharm.</p>

<h2 id="install-openjdk">Install OpenJDK</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>openjdk@11
</code></pre></div></div>

<p>Add OpenJDK to your PATH:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div>

<p>For compilers, set:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-I/opt/homebrew/opt/openjdk@11/include"</span>
</code></pre></div></div>

<h2 id="ssh-key-setup">SSH Key Setup</h2>

<p>Create unique keys for each platform (e.g., GitHub, GitLab).</p>

<h3 id="github">GitHub</h3>

<p>Follow <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub’s guide</a>.</p>

<h3 id="gitlab">GitLab</h3>

<p>Follow <a href="http://10.1.2.150:53180/help/ssh/README">GitLab’s SSH setup guide</a>.</p>

<h2 id="android-build-issue">Android Build Issue</h2>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Caused by: java.lang.Exception: No native library is found <span class="k">for </span>os.name<span class="o">=</span>Mac and os.arch<span class="o">=</span>aarch64. <span class="nv">path</span><span class="o">=</span>/org/sqlite/native/Mac/aarch64
</code></pre></div></div>

<p>Refer to <a href="https://stackoverflow.com/questions/68884589/caused-by-java-lang-exception-no-native-library-is-found-for-os-name-mac-and-o">this StackOverflow solution</a>.</p>

<hr />

<p>🎉 Your macOS development environment setup is complete!</p>]]></content><author><name>Nick Huang</name></author><category term="Setup Guide" /><category term="macOS" /><category term="Development" /><category term="Mobile Development" /><summary type="html"><![CDATA[Step-by-step guide to setting up a mobile development environment on a new macOS system.]]></summary></entry><entry><title type="html">Design Pattern (28) - Interpreter Pattern (解譯器模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-28-interpreter-pattern/" rel="alternate" type="text/html" title="Design Pattern (28) - Interpreter Pattern (解譯器模式)" /><published>2024-12-29T08:30:00+00:00</published><updated>2024-12-29T08:30:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-28-interpreter-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-28-interpreter-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<hr />

<h2 id="需求">需求</h2>

<p>我們需要設計一個布林運算解譯系統，具備以下功能：</p>

<ol>
  <li>能解譯包含布林值、AND 運算與 OR 運算的表達式。</li>
  <li>符合開放關閉原則，能夠方便地新增其他運算（如 NOT）。</li>
  <li>系統結構清晰，易於維護與擴展。</li>
</ol>

<hr />

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧！</p>

<p><img src="/blog/assets/images/design_pattern_interpreter_pattern_uml_1.png" alt="interpreter_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<ol>
  <li>
    <p><strong>複雜性增加</strong></p>

    <ul>
      <li>隨著運算符類型增加，手動解析邏輯會變得難以維護。</li>
    </ul>
  </li>
  <li>
    <p><strong>重複代碼</strong></p>

    <ul>
      <li>不同運算符的處理可能導致類似功能重複實現。</li>
    </ul>
  </li>
  <li>
    <p><strong>難以擴展</strong></p>
    <ul>
      <li>新增運算符需要修改大量代碼，違反開放關閉原則 (OCP)。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="套用-interpreter-pattern-solution-得到新的-context-resulting-context">套用 Interpreter Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Interpreter Pattern 解決這個問題。</p>

<p>先來看一下 Interpreter Pattern 的 UML</p>

<p><img src="/blog/assets/images/design_pattern_interpreter_pattern_uml_2.png" alt="interpreter_pattern_uml_2" /></p>

<h3 id="interrepter-pattern-的組件">Interrepter Pattern 的組件</h3>

<ol>
  <li>
    <p><strong>建立抽象表達式 (Expression)</strong></p>

    <ul>
      <li>定義所有表達式的通用介面，確保不同類型的表達式可以被統一處理。</li>
    </ul>
  </li>
  <li>
    <p><strong>設計終端表達式 (Terminal Expression)</strong></p>

    <ul>
      <li>負責處理語法中的基本單位（如布林值 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code>）。</li>
    </ul>
  </li>
  <li>
    <p><strong>設計非終端表達式 (Non-Terminal Expression)</strong></p>
    <ul>
      <li>表示複雜運算的組合（如 <code class="language-plaintext highlighter-rouge">AND</code> 和 <code class="language-plaintext highlighter-rouge">OR</code>），遞迴處理子表達式。</li>
    </ul>
  </li>
</ol>

<p>為了解決上述問題，我們採用解譯器模式來建構布林運算系統。核心思想是將每個運算符與操作數作為一個 “表達式”，並使用遞迴的方式進行解譯。</p>

<p>透過這種方式，我們可以將複雜的布林運算拆解為多個小型且可組合的單元，並保持系統結構的靈活性。</p>

<p>將 Interpreter Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_interpreter_pattern_uml_3.png" alt="interpreter_pattern_uml_3" /></p>

<hr />

<h2 id="物件導向程式設計-oop">物件導向程式設計 (OOP)</h2>

<p>[抽象表達式: Expression]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Expression</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">interpret</span><span class="p">():</span> <span class="nc">Boolean</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[終端表達式: BooleanValue]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BooleanValue</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Expression</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">interpret</span><span class="p">():</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="n">value</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[非終端表達式: AndExpression, OrExpression]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AndExpression</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">left</span><span class="p">:</span> <span class="nc">Expression</span><span class="p">,</span> <span class="k">private</span> <span class="kd">val</span> <span class="py">right</span><span class="p">:</span> <span class="nc">Expression</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Expression</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">interpret</span><span class="p">():</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="n">left</span><span class="p">.</span><span class="nf">interpret</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">right</span><span class="p">.</span><span class="nf">interpret</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">OrExpression</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">left</span><span class="p">:</span> <span class="nc">Expression</span><span class="p">,</span> <span class="k">private</span> <span class="kd">val</span> <span class="py">right</span><span class="p">:</span> <span class="nc">Expression</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Expression</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">interpret</span><span class="p">():</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="n">left</span><span class="p">.</span><span class="nf">interpret</span><span class="p">()</span> <span class="p">||</span> <span class="n">right</span><span class="p">.</span><span class="nf">interpret</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[客戶端代碼: Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 定義布林表達式：true AND false OR true</span>
    <span class="kd">val</span> <span class="py">expression</span> <span class="p">=</span> <span class="nc">OrExpression</span><span class="p">(</span>
        <span class="nc">AndExpression</span><span class="p">(</span>
            <span class="nc">BooleanValue</span><span class="p">(</span><span class="k">true</span><span class="p">),</span>
            <span class="nc">BooleanValue</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
        <span class="p">),</span>
        <span class="nc">BooleanValue</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="c1">// 計算結果</span>
    <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">expression</span><span class="p">.</span><span class="nf">interpret</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Result of the expression is: $result"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Result</span> <span class="n">of</span> <span class="n">the</span> <span class="n">expression</span> <span class="k">is</span><span class="p">:</span> <span class="k">true</span>
</code></pre></div></div>

<hr />

<h2 id="結論">結論</h2>

<p>透過解譯器模式，我們成功解決了布林運算系統的設計挑戰，並實現以下優勢：</p>

<ol>
  <li>
    <p><strong>結構清晰</strong></p>

    <ul>
      <li>將每個運算符和操作數封裝成表達式類別，便於組合與管理。</li>
    </ul>
  </li>
  <li>
    <p><strong>易於擴展</strong></p>

    <ul>
      <li>新增運算符只需實現新的表達式類別，符合開放關閉原則 (OCP)。</li>
    </ul>
  </li>
  <li>
    <p><strong>靈活性高</strong></p>
    <ul>
      <li>支持動態構建與解譯複雜表達式，適用於多種運算場景。</li>
    </ul>
  </li>
</ol>

<p>需要注意的是，解譯器模式更適合處理結構簡單的語法。如果語法過於複雜，可能導致類別數量激增，這時可以考慮結合其他模式（如組合模式或訪問者模式）進行優化。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Interpreter Pattern" /><summary type="html"><![CDATA[解譯器模式用於構建一個可解讀特定語言或語法的系統，適合於處理複雜的規則判斷或指令語法。]]></summary></entry><entry><title type="html">Design Pattern (27) - Visitor Pattern (訪問者模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-27-visitor-pattern/" rel="alternate" type="text/html" title="Design Pattern (27) - Visitor Pattern (訪問者模式)" /><published>2024-12-28T13:30:00+00:00</published><updated>2024-12-28T13:30:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-27-visitor-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-27-visitor-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<hr />

<h2 id="需求">需求</h2>

<p>在設計一個 <strong>IoT App 整合多品牌 IPCam 的功能</strong> 時，我們需要滿足以下需求：</p>

<ol>
  <li>支援多種 IPCam 品牌，這些品牌的 IPCam 提供不同的串流與截圖方式：
    <ul>
      <li><strong>HIKVISION</strong> 提供 RTSP 協定，可以用通用方式播放串流與截圖。</li>
      <li><strong>DAHUA</strong> 提供自家 SDK，需要依賴 SDK 提供的方法進行操作。</li>
    </ul>
  </li>
  <li><strong>App 的程式碼結構不應依賴 IPCam 品牌的實現細節</strong>，應保持開放擴展性，方便後續新增新的 IPCam 品牌。</li>
  <li><strong>避免修改 IPCam 的核心結構</strong>，因為這些品牌的實現通常由廠商提供，無法直接修改。</li>
</ol>

<hr />

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧！</p>

<p><img src="/blog/assets/images/design_pattern_visitor_pattern_uml_1.png" alt="visitor_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<p>如果未套用設計模式，我們可能會遇到以下問題：</p>

<ol>
  <li><strong>難以擴展新品牌</strong>
    <ul>
      <li>每新增一個品牌的 IPCam，就需要修改 App 的核心邏輯。</li>
    </ul>
  </li>
  <li><strong>違反開放關閉原則 (OCP)</strong>
    <ul>
      <li>核心邏輯與品牌實現細節耦合，新增功能需要修改核心程式碼。</li>
    </ul>
  </li>
  <li><strong>無法統一處理不同品牌的操作</strong>
    <ul>
      <li>每個品牌的串流與截圖方式不同，導致程式碼混亂，難以維護。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="套用-visitor-pattern-solution-得到新的-context-resulting-context">套用 Visitor Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Visitor Pattern 解決這個問題。</p>

<p>先來看一下 Visitor Pattern 的 UML</p>

<p><img src="/blog/assets/images/design_pattern_visitor_pattern_uml_2.png" alt="visitor_pattern_uml_2" /></p>

<h3 id="visitor-pattern-的組件">Visitor Pattern 的組件</h3>

<p>訪問者模式的核心組件包括：</p>

<ol>
  <li>
    <p><strong>Visitor (訪問者介面)</strong></p>

    <ul>
      <li>定義對每種類型物件的操作方法。</li>
    </ul>
  </li>
  <li>
    <p><strong>ConcreteVisitor (具體訪問者)</strong></p>

    <ul>
      <li>實現特定操作邏輯。</li>
    </ul>
  </li>
  <li>
    <p><strong>Element (元素介面)</strong></p>

    <ul>
      <li>定義接受訪問者的方法 (<code class="language-plaintext highlighter-rouge">accept</code>)，並將訪問者傳遞給自己。</li>
    </ul>
  </li>
  <li>
    <p><strong>ConcreteElement (具體元素)</strong></p>
    <ul>
      <li>實現接受訪問者的方法，讓訪問者能夠訪問並操作具體元素。</li>
    </ul>
  </li>
</ol>

<p>將 Visitor Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_visitor_pattern_uml_3.png" alt="visitor_pattern_uml_3" /></p>

<hr />

<h2 id="物件導向設計-oop">物件導向設計 (OOP)</h2>

<p>[Element: IPCam]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">IPCam</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="nc">IPCamVisitor</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteElements: HikvisionIPCam, DahuaIPCam]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HikvisionIPCam</span> <span class="p">:</span> <span class="nc">IPCam</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="nc">IPCamVisitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">visitor</span><span class="p">.</span><span class="nf">visitHikvision</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">getRTSPStream</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"rtsp://hikvision/stream"</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">captureSnapshot</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Hikvision Snapshot"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">DahuaIPCam</span> <span class="p">:</span> <span class="nc">IPCam</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="nc">IPCamVisitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">visitor</span><span class="p">.</span><span class="nf">visitDahua</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">startSDKStream</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Dahua SDK Stream"</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">takeSDKSnapshot</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Dahua Snapshot"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Visitor: IPCamVisitor]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">IPCamVisitor</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">visitHikvision</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">HikvisionIPCam</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">visitDahua</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">DahuaIPCam</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteVisitors: IPCamStreamingVisitor, IPCamSnapshotVisitor]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IPCamStreamingVisitor</span> <span class="p">:</span> <span class="nc">IPCamVisitor</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">visitHikvision</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">HikvisionIPCam</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Streaming: ${ipCam.getRTSPStream()}"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">visitDahua</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">DahuaIPCam</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Streaming: ${ipCam.startSDKStream()}"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">IPCamSnapshotVisitor</span> <span class="p">:</span> <span class="nc">IPCamVisitor</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">visitHikvision</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">HikvisionIPCam</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Snapshot: ${ipCam.captureSnapshot()}"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">visitDahua</span><span class="p">(</span><span class="n">ipCam</span><span class="p">:</span> <span class="nc">DahuaIPCam</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Snapshot: ${ipCam.takeSDKSnapshot()}"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">ipCams</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">IPCam</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(</span><span class="nc">HikvisionIPCam</span><span class="p">(),</span> <span class="nc">DahuaIPCam</span><span class="p">())</span>
    <span class="kd">val</span> <span class="py">streamingVisitor</span> <span class="p">=</span> <span class="nc">IPCamStreamingVisitor</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">snapshotVisitor</span> <span class="p">=</span> <span class="nc">IPCamSnapshotVisitor</span><span class="p">()</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">ipCam</span> <span class="k">in</span> <span class="n">ipCams</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ipCam</span><span class="p">.</span><span class="nf">accept</span><span class="p">(</span><span class="n">streamingVisitor</span><span class="p">)</span>
        <span class="n">ipCam</span><span class="p">.</span><span class="nf">accept</span><span class="p">(</span><span class="n">snapshotVisitor</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Streaming: rtsp://hikvision/stream
Snapshot: Hikvision Snapshot
Streaming: Dahua SDK Stream
Snapshot: Dahua Snapshot
</code></pre></div></div>

<hr />

<h2 id="結論">結論</h2>

<p>透過 Visitor Pattern，我們成功將不同品牌 IPCam 的操作邏輯與物件結構分離，並實現以下優勢：</p>

<ol>
  <li>
    <p><strong>易於擴展新品牌</strong></p>

    <ul>
      <li>新增品牌只需實作新的 <code class="language-plaintext highlighter-rouge">ConcreteElement</code> 類別，並在訪問者中新增相應的操作方法。</li>
    </ul>
  </li>
  <li>
    <p><strong>操作邏輯集中</strong></p>

    <ul>
      <li>不同品牌的操作邏輯集中於訪問者中，便於維護與管理。</li>
    </ul>
  </li>
  <li>
    <p><strong>符合設計原則</strong></p>
    <ul>
      <li>單一職責原則 (SRP)：操作邏輯與物件結構分離。</li>
      <li>開放關閉原則 (OCP)：允許新增功能而不修改既有程式碼。</li>
    </ul>
  </li>
</ol>

<p>訪問者模式非常適合處理以下場景：</p>

<ul>
  <li>多種類型物件需要執行不同操作。</li>
  <li>物件結構穩定，但操作邏輯經常變化。</li>
</ul>

<p>訪問者模式為多變操作提供了一個優雅的解決方案，確保系統具有高擴展性與靈活性。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Visitor Pattern" /><summary type="html"><![CDATA[訪問者模式提供了一種方式，讓我們能在不修改物件結構的前提下，為其增加新的操作邏輯，實現高擴展性。]]></summary></entry><entry><title type="html">Design Pattern (26) - Template Method Pattern (模板方法模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-26-template-method-pattern/" rel="alternate" type="text/html" title="Design Pattern (26) - Template Method Pattern (模板方法模式)" /><published>2024-12-28T11:30:00+00:00</published><updated>2024-12-28T11:30:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-26-template-method-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-26-template-method-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<hr />

<h2 id="需求">需求</h2>

<p>在設計一個 <strong>資料格式轉換系統</strong> 時，我們需要滿足以下需求：</p>

<ol>
  <li>支援多種格式轉換，例如：
    <ul>
      <li><strong>JSON 格式轉換</strong>：將資料轉換為 JSON 格式。</li>
      <li><strong>XML 格式轉換</strong>：將資料轉換為 XML 格式。</li>
      <li><strong>CSV 格式轉換</strong>：將資料轉換為 CSV 格式。</li>
    </ul>
  </li>
  <li>系統需具備良好的擴展性：
    <ul>
      <li>能夠方便地新增新的格式轉換方式。</li>
    </ul>
  </li>
  <li><strong>保持轉換流程核心一致性</strong>，例如：
    <ul>
      <li>所有格式轉換都需要：讀取資料、格式化資料、輸出資料。</li>
    </ul>
  </li>
  <li><strong>避免重複程式碼</strong>。</li>
</ol>

<hr />

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧!</p>

<p><img src="/blog/assets/images/design_pattern_template_method_pattern_uml_1.png" alt="template_method_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<p>如果未套用設計模式，我們可能會遇到以下問題：</p>

<ol>
  <li><strong>程式碼重複</strong>
    <ul>
      <li>每種格式的轉換邏輯中包含相同步驟，但被多次重複實作。</li>
    </ul>
  </li>
  <li><strong>違反開放關閉原則 (OCP)</strong>
    <ul>
      <li>新增格式需要修改核心轉換邏輯。</li>
    </ul>
  </li>
  <li><strong>難以維護與擴展</strong>
    <ul>
      <li>各格式轉換邏輯分散，難以統一管理與修改。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="套用-template-method-pattern-solution-得到新的-context-resulting-context">套用 Template Method Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Template Method Pattern 解決這個問題。</p>

<p>先來看一下 Template Method Pattern 的 UML</p>

<p><img src="/blog/assets/images/design_pattern_template_method_pattern_uml_2.png" alt="template_method_pattern_uml_2" /></p>

<h3 id="template-method-pattern-的組件">Template Method Pattern 的組件</h3>

<p>模板方法模式的核心組件包括：</p>

<ol>
  <li>
    <p><strong>AbstractClass (抽象類別)</strong></p>

    <ul>
      <li>定義模板方法 (Template Method)，封裝核心流程。</li>
      <li>提供部分步驟的預設實作，或將其標記為抽象，由子類別實現。</li>
    </ul>
  </li>
  <li>
    <p><strong>ConcreteClass (具體類別)</strong></p>
    <ul>
      <li>繼承抽象類別，實現具體步驟。</li>
    </ul>
  </li>
</ol>

<p>以下是 Template Method Pattern 的 UML 圖：</p>

<p><img src="/blog/assets/images/design_pattern_template_method_pattern_uml_3.png" alt="template_method_pattern_uml_3" /></p>

<hr />

<h2 id="物件導向設計-oop">物件導向設計 (OOP)</h2>

<p>[AbstractClass: DataFormatter]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="kd">class</span> <span class="nc">DataFormatter</span> <span class="p">{</span>

    <span class="k">fun</span> <span class="nf">convert</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span> <span class="nc">Any</span><span class="p">&gt;):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">rawData</span> <span class="p">=</span> <span class="nf">readData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">formattedData</span> <span class="p">=</span> <span class="nf">formatData</span><span class="p">(</span><span class="n">rawData</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">outputData</span><span class="p">(</span><span class="n">formattedData</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">fun</span> <span class="nf">readData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span> <span class="nc">Any</span><span class="p">&gt;):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1">// subclass implementation</span>
    <span class="k">protected</span> <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">formatData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span>

    <span class="k">protected</span> <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">outputData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteClasses: JsonFormatter, XmlFormatter, CsvFormatter]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JsonFormatter</span> <span class="p">:</span> <span class="nc">DataFormatter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">formatData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"{\"data\": \"$data\"}"</span> <span class="c1">// 模擬 JSON 格式化</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">outputData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"JSON Output: $data"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">XmlFormatter</span> <span class="p">:</span> <span class="nc">DataFormatter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">formatData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"&lt;data&gt;$data&lt;/data&gt;"</span> <span class="c1">// 模擬 XML 格式化</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">outputData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"XML Output: $data"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CsvFormatter</span> <span class="p">:</span> <span class="nc">DataFormatter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">formatData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="s">", "</span><span class="p">,</span> <span class="s">"\n"</span><span class="p">)</span> <span class="c1">// 模擬 CSV 格式化</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">outputData</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"CSV Output: $data"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">data</span> <span class="p">=</span> <span class="nf">mapOf</span><span class="p">(</span><span class="s">"name"</span> <span class="n">to</span> <span class="s">"John"</span><span class="p">,</span> <span class="s">"age"</span> <span class="n">to</span> <span class="mi">30</span><span class="p">,</span> <span class="s">"city"</span> <span class="n">to</span> <span class="s">"New York"</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">jsonFormatter</span> <span class="p">=</span> <span class="nc">JsonFormatter</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">jsonFormatter</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">xmlFormatter</span> <span class="p">=</span> <span class="nc">XmlFormatter</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">xmlFormatter</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">csvFormatter</span> <span class="p">=</span> <span class="nc">CsvFormatter</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">csvFormatter</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JSON Output: {"data": "{name=John, age=30, city=New York}"}
XML Output: &lt;data&gt;{name=John, age=30, city=New York}&lt;/data&gt;
CSV Output: name=John\nage=30\ncity=New York
</code></pre></div></div>

<hr />

<h2 id="結論">結論</h2>

<p>透過 Template Method Pattern，我們成功將資料格式轉換的通用邏輯與變化邏輯分離，並實現以下優勢：</p>

<ol>
  <li>
    <p><strong>程式碼復用性高</strong></p>

    <ul>
      <li>通用的轉換流程邏輯在抽象類別中實現，避免重複。</li>
    </ul>
  </li>
  <li>
    <p><strong>易於擴展</strong></p>

    <ul>
      <li>新增格式只需繼承抽象類別並實現特定步驟。</li>
    </ul>
  </li>
  <li>
    <p><strong>符合設計原則</strong></p>
    <ul>
      <li>單一職責原則 (SRP)：核心流程與特定邏輯分離。</li>
      <li>開放關閉原則 (OCP)：允許新增功能而不修改既有程式碼。</li>
    </ul>
  </li>
</ol>

<p>模板方法模式非常適合處理以下場景：</p>

<ul>
  <li>不同的資料格式轉換流程。</li>
  <li>文檔生成流程 (例如：PDF、Excel)。</li>
  <li>多種資料處理的過程。</li>
</ul>

<p>模板方法模式確保系統核心流程的一致性，為實現靈活且高效的擴展提供了一個優雅的解決方案。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Template Method Pattern" /><summary type="html"><![CDATA[模板方法模式提供了一個框架，允許子類別重新定義特定步驟的實作，保持核心流程的一致性，實現高復用性與靈活性。]]></summary></entry><entry><title type="html">Design Pattern (25) - Strategy Pattern (策略模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-25-strategy-pattern/" rel="alternate" type="text/html" title="Design Pattern (25) - Strategy Pattern (策略模式)" /><published>2024-12-26T15:50:00+00:00</published><updated>2024-12-26T15:50:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-25-strategy-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-25-strategy-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<hr />

<h2 id="需求">需求</h2>

<p>在設計一個 <strong>電商運費計算系統</strong> 時，我們需要滿足以下需求：</p>

<ol>
  <li>支援多種運費計算方式，例如：
    <ul>
      <li><strong>一般配送</strong>：固定運費。</li>
      <li><strong>快速配送</strong>：依重量計費。</li>
      <li><strong>國際配送</strong>：根據地區與重量計費。</li>
    </ul>
  </li>
  <li>系統需具備良好的擴展性：
    <ul>
      <li>能夠方便地新增新的運費計算方式。</li>
    </ul>
  </li>
  <li><strong>避免使用大量的 if-else 或 switch-case</strong>。</li>
  <li>使用者應能輕鬆切換運費計算方式。</li>
</ol>

<hr />

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧!</p>

<p><img src="/blog/assets/images/design_pattern_strategy_pattern_uml_1.png" alt="strategy_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<p>如果未套用設計模式，我們可能會遇到以下問題：</p>

<ol>
  <li>
    <p><strong>難以維護</strong></p>

    <ul>
      <li>運費計算邏輯混雜在主程式內，新增或修改一種計算方式可能會影響其他部分。</li>
    </ul>
  </li>
  <li>
    <p><strong>違反開放關閉原則 (OCP)</strong></p>

    <ul>
      <li>每次新增運費計算方式都需修改核心業務邏輯。</li>
    </ul>
  </li>
  <li>
    <p><strong>違反單一職責原則 (SRP)</strong></p>
    <ul>
      <li>主程式同時負責運費計算與核心業務邏輯，責任過於繁重。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="套用-strategy-pattern-solution-得到新的-context-resulting-context">套用 Strategy Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Strategy Pattern 解決這個問題</p>

<p>先來看一下 Strategy Pattern 的 UML</p>

<p><img src="/blog/assets/images/design_pattern_strategy_pattern_uml_2.png" alt="strategy_pattern_uml_2" /></p>

<h3 id="strategy-pattern-的組件">Strategy Pattern 的組件</h3>

<p>策略模式的核心組件包括：</p>

<ol>
  <li>
    <p><strong>Strategy (策略介面)</strong><br />
定義所有策略需要實現的行為。</p>
  </li>
  <li>
    <p><strong>ConcreteStrategy (具體策略)</strong><br />
每個具體策略類別實現特定的行為邏輯。</p>
  </li>
  <li>
    <p><strong>Context (上下文)</strong><br />
維護一個策略物件，並根據當前策略執行對應行為。</p>
  </li>
</ol>

<p>將 Strategy Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_strategy_pattern_uml_3.png" alt="strategy_pattern_uml_3" /></p>

<hr />

<h2 id="物件導向設計-oop">物件導向設計 (OOP)</h2>

<p>[Strategy: ShippingStrategy]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ShippingStrategy</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">calculateShippingCost</span><span class="p">(</span><span class="n">weight</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="n">region</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Double</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteStrategies: RegularShipping, ExpressShipping, InternationalShipping]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RegularShipping</span> <span class="p">:</span> <span class="nc">ShippingStrategy</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">calculateShippingCost</span><span class="p">(</span><span class="n">weight</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="n">region</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mf">50.0</span> <span class="c1">// 固定運費</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">ExpressShipping</span> <span class="p">:</span> <span class="nc">ShippingStrategy</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">calculateShippingCost</span><span class="p">(</span><span class="n">weight</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="n">region</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">weight</span> <span class="p">*</span> <span class="mi">10</span> <span class="c1">// 每公斤 10 元</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">InternationalShipping</span> <span class="p">:</span> <span class="nc">ShippingStrategy</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">calculateShippingCost</span><span class="p">(</span><span class="n">weight</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="n">region</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">regionMultiplier</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">region</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"Asia"</span> <span class="p">-&gt;</span> <span class="mi">15</span>
            <span class="s">"Europe"</span> <span class="p">-&gt;</span> <span class="mi">20</span>
            <span class="s">"America"</span> <span class="p">-&gt;</span> <span class="mi">25</span>
            <span class="k">else</span> <span class="p">-&gt;</span> <span class="mi">30</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">weight</span> <span class="p">*</span> <span class="n">regionMultiplier</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Context: ShippingCalculator]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ShippingCalculator</span><span class="p">(</span><span class="k">private</span> <span class="kd">var</span> <span class="py">strategy</span><span class="p">:</span> <span class="nc">ShippingStrategy</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">fun</span> <span class="nf">setStrategy</span><span class="p">(</span><span class="n">strategy</span><span class="p">:</span> <span class="nc">ShippingStrategy</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">strategy</span> <span class="p">=</span> <span class="n">strategy</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">calculateCost</span><span class="p">(</span><span class="n">weight</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="n">region</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">calculateShippingCost</span><span class="p">(</span><span class="n">weight</span><span class="p">,</span> <span class="n">region</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">calculator</span> <span class="p">=</span> <span class="nc">ShippingCalculator</span><span class="p">(</span><span class="nc">RegularShipping</span><span class="p">())</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"一般配送運費: ${calculator.calculateCost(5.0, "</span><span class="nc">Asia</span><span class="s">")} 元"</span><span class="p">)</span> <span class="c1">// 固定 50 元</span>

    <span class="n">calculator</span><span class="p">.</span><span class="nf">setStrategy</span><span class="p">(</span><span class="nc">ExpressShipping</span><span class="p">())</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"快速配送運費: ${calculator.calculateCost(5.0, "</span><span class="nc">Asia</span><span class="s">")} 元"</span><span class="p">)</span> <span class="c1">// 5.0 * 10 = 50 元</span>

    <span class="n">calculator</span><span class="p">.</span><span class="nf">setStrategy</span><span class="p">(</span><span class="nc">InternationalShipping</span><span class="p">())</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"國際配送運費 (Asia): ${calculator.calculateCost(5.0, "</span><span class="nc">Asia</span><span class="s">")} 元"</span><span class="p">)</span> <span class="c1">// 5.0 * 15 = 75 元</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">一般配送運費</span><span class="p">:</span> <span class="mf">50.0</span> <span class="err">元</span>
<span class="err">快速配送運費</span><span class="p">:</span> <span class="mf">50.0</span> <span class="err">元</span>
<span class="err">國際配送運費</span> <span class="p">(</span><span class="nc">Asia</span><span class="p">):</span> <span class="mf">75.0</span> <span class="err">元</span>
</code></pre></div></div>

<h2 id="結論">結論</h2>

<p>透過 Strategy Pattern，我們成功將運費計算邏輯與核心功能分離，並實現以下優勢：</p>

<ol>
  <li>易於擴展</li>
</ol>

<ul>
  <li>新增運費計算方式只需實作新的策略類別，無需修改現有程式碼。</li>
</ul>

<ol>
  <li>低耦合性</li>
</ol>

<ul>
  <li>運費計算邏輯與核心業務邏輯分離，各自負責自己的功能。</li>
</ul>

<ol>
  <li>符合設計原則</li>
</ol>

<ul>
  <li>單一職責原則 (SRP)：每個策略類別專注於特定運費計算邏輯。</li>
  <li>開放關閉原則 (OCP)：策略模式允許在不修改現有程式碼的情況下，新增新功能。</li>
</ul>

<p>策略模式非常適合處理需要根據條件執行不同行為的場景，例如：</p>

<ul>
  <li>不同的折扣策略 (滿額折扣、季節性優惠)。</li>
  <li>不同的排序算法 (快速排序、合併排序)。</li>
  <li>各類繳稅計算方式。</li>
</ul>

<p>策略模式讓系統更具彈性，為複雜問題提供了一個優雅的解決方案。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Strategy Pattern" /><summary type="html"><![CDATA[策略模式提供了一種靈活的解決方案，讓系統能根據需求動態切換不同的行為邏輯，實現高可擴展性與低耦合性。]]></summary></entry><entry><title type="html">Design Pattern (24) - State Pattern (狀態模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-24-state-pattern/" rel="alternate" type="text/html" title="Design Pattern (24) - State Pattern (狀態模式)" /><published>2024-12-22T07:00:00+00:00</published><updated>2024-12-22T07:00:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-24-state-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-24-state-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<hr />

<h2 id="需求">需求</h2>

<p>我們的任務是設計一個 <strong>飲水機</strong>，需求如下：</p>

<ul>
  <li>飲水機有三種狀態：
    <ul>
      <li><strong>加熱中</strong>：提升水溫至熱水。</li>
      <li><strong>冷卻中</strong>：降低水溫至冷水。</li>
      <li><strong>待機中</strong>：維持現有水溫。</li>
    </ul>
  </li>
  <li>使用者可透過按鈕切換飲水機的狀態。</li>
  <li>飲水機需要根據當前狀態執行正確的行為，例如加熱狀態時加熱水，但不可冷卻。</li>
</ul>

<hr />

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧!</p>

<p><img src="/blog/assets/images/design_pattern_state_pattern_uml_1.png" alt="state_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<p>在未使用設計模式的情況下，我們可能面臨以下挑戰：</p>

<ol>
  <li>
    <p><strong>高耦合性 (High Coupling)</strong></p>

    <ul>
      <li>狀態邏輯與飲水機核心功能混合在一起，導致程式碼難以維護。</li>
    </ul>
  </li>
  <li>
    <p><strong>違反單一職責原則 (SRP)</strong></p>

    <ul>
      <li>飲水機類別需要同時處理狀態邏輯與主要功能，責任過於繁重。</li>
    </ul>
  </li>
  <li>
    <p><strong>難以擴展 (Hard to Extend)</strong></p>
    <ul>
      <li>新增或修改狀態行為需更改飲水機核心邏輯，違反開放關閉原則 (OCP)。</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="套用-state-pattern-solution-得到新的-context-resulting-context">套用 State Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 State Pattern 解決這個問題</p>

<p>察覺 Forces 後，我們可以套用 <strong>State Pattern</strong>，將狀態邏輯封裝成獨立的類別，達到以下效果：</p>

<p><img src="/blog/assets/images/design_pattern_state_pattern_uml_2.png" alt="state_pattern_uml_2" /></p>

<p>狀態模式有三個角色:</p>

<ol>
  <li>
    <p><strong>State (狀態介面)</strong><br />
定義所有具體狀態需要實現的行為。</p>
  </li>
  <li>
    <p><strong>ConcreteState (具體狀態)</strong><br />
每個具體狀態類別實現 State 介面，並負責該狀態下的具體行為邏輯。</p>
  </li>
  <li>
    <p><strong>Context (上下文)</strong><br />
負責維護當前狀態，並提供介面讓外部操作。在執行操作時，將請求委派給當前狀態物件。</p>
  </li>
</ol>

<ul>
  <li>飲水機類別負責狀態管理，而非具體行為實現，降低耦合度。</li>
  <li>每個狀態專注於自身行為，符合單一職責原則。</li>
  <li>新增或修改狀態無需影響飲水機核心邏輯，符合開放關閉原則。</li>
</ul>

<p>將 State Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_state_pattern_uml_3.png" alt="state_pattern_uml_3" /></p>

<hr />

<h2 id="物件導向設計-oop">物件導向設計 (OOP)</h2>

<p>[State: WaterDispenserState]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">WaterDispenserState</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteStates: HeatingState, CoolingState, StandbyState]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HeatingState</span> <span class="p">:</span> <span class="nc">WaterDispenserState</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"加熱中：水溫正在提升，請稍候..."</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CoolingState</span> <span class="p">:</span> <span class="nc">WaterDispenserState</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"冷卻中：水溫正在降低，請稍候..."</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">StandbyState</span> <span class="p">:</span> <span class="nc">WaterDispenserState</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleRequest</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"待機中：飲水機維持現有水溫，隨時可用。"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Context: WaterDispenser]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WaterDispenser</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">currentState</span><span class="p">:</span> <span class="nc">WaterDispenserState</span> <span class="p">=</span> <span class="nc">StandbyState</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">setState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="nc">WaterDispenserState</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">currentState</span> <span class="p">=</span> <span class="n">state</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"狀態切換：${state::class.simpleName}"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">pressButton</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">currentState</span><span class="p">.</span><span class="nf">handleRequest</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">dispenser</span> <span class="p">=</span> <span class="nc">WaterDispenser</span><span class="p">()</span>

    <span class="c1">// 初始狀態為待機中</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">pressButton</span><span class="p">()</span>

    <span class="c1">// 切換到加熱狀態</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">setState</span><span class="p">(</span><span class="nc">HeatingState</span><span class="p">())</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">pressButton</span><span class="p">()</span>

    <span class="c1">// 切換到冷卻狀態</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">setState</span><span class="p">(</span><span class="nc">CoolingState</span><span class="p">())</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">pressButton</span><span class="p">()</span>

    <span class="c1">// 回到待機狀態</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">setState</span><span class="p">(</span><span class="nc">StandbyState</span><span class="p">())</span>
    <span class="n">dispenser</span><span class="p">.</span><span class="nf">pressButton</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">待機中：飲水機維持現有水溫，隨時可用。</span>
<span class="err">狀態切換：</span><span class="nc">HeatingState</span>
<span class="err">加熱中：水溫正在提升，請稍候</span><span class="o">..</span><span class="p">.</span>
<span class="err">狀態切換：</span><span class="nc">CoolingState</span>
<span class="err">冷卻中：水溫正在降低，請稍候</span><span class="o">..</span><span class="p">.</span>
<span class="err">狀態切換：</span><span class="nc">StandbyState</span>
<span class="err">待機中：飲水機維持現有水溫，隨時可用。</span>
</code></pre></div></div>

<h2 id="結論">結論</h2>

<p>透過 State Pattern，我們成功將飲水機的狀態邏輯與核心功能分離，實現以下優勢：</p>

<ol>
  <li>降低耦合度</li>
</ol>

<ul>
  <li>飲水機類別專注於狀態切換，具體行為由狀態類別負責。</li>
</ul>

<ol>
  <li>符合設計原則</li>
</ol>

<ul>
  <li>單一職責原則 (SRP)：每個狀態類別專注於自身行為。</li>
  <li>開放關閉原則 (OCP)：新增狀態無需修改現有程式碼。</li>
</ul>

<ol>
  <li>易於擴展</li>
</ol>

<ul>
  <li>新增或修改狀態行為時，不影響其他部分。</li>
</ul>

<p>此模式特別適合處理複雜的狀態轉換場景，例如：</p>

<ul>
  <li>ATM 機的插卡、操作、取卡狀態。</li>
  <li>文檔編輯器的編輯、檢視、列印模式。</li>
</ul>

<p>狀態模式讓程式結構更具彈性，是開發狀態機制應用的最佳選擇！</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="State Pattern" /><summary type="html"><![CDATA[透過狀態模式，設計一個飲水機的運作機制，根據不同狀態執行加熱、冷卻或待機的行為。]]></summary></entry><entry><title type="html">Design Pattern (20) - Iterator Pattern (迭代器模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-20-iterator-pattern/" rel="alternate" type="text/html" title="Design Pattern (20) - Iterator Pattern (迭代器模式)" /><published>2024-12-22T06:00:00+00:00</published><updated>2024-12-22T06:00:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-20-iterator-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-20-iterator-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<h2 id="需求">需求</h2>

<p>我們的任務是設計一個檔案系統搜尋工具，需求如下：</p>

<ul>
  <li>使用者可以選擇不同的檔案搜尋方式，例如 <strong>廣度優先搜尋 (BFS)</strong> 或 <strong>深度優先搜尋 (DFS)</strong>。</li>
  <li>客戶端不需要關心搜尋邏輯的實現細節，只需使用統一的迭代器介面來遍歷搜尋結果。</li>
  <li>系統需要具備擴展性，方便新增其他搜尋法，例如基於檔案大小排序的搜尋。</li>
</ul>

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧！</p>

<p><img src="/blog/assets/images/design_pattern_iterator_pattern_uml_1.png" alt="iterator_pattern_uml_1" /></p>

<h2 id="察覺-forces">察覺 Forces</h2>

<p>在未使用設計模式的情況下，我們可能面臨以下挑戰：</p>

<ol>
  <li>
    <p><strong>高耦合性 (High Coupling)</strong>：</p>

    <ul>
      <li>客戶端需要直接操作每種搜尋方式的實現細節，導致代碼臃腫且難以維護。</li>
    </ul>
  </li>
  <li>
    <p><strong>缺乏一致性 (Lack of Consistency)</strong>：</p>

    <ul>
      <li>不同搜尋方式的結果訪問方式可能不一致。</li>
    </ul>
  </li>
  <li>
    <p><strong>違反開放關閉原則 (Violates OCP)</strong>：</p>
    <ul>
      <li>若新增搜尋法或更改現有搜尋邏輯，需要修改客戶端程式碼。</li>
    </ul>
  </li>
</ol>

<h2 id="套用-iterator-pattern-solution-得到新的-context-resulting-context">套用 Iterator Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Iterator Pattern 解決這個問題。</p>

<p>迭代器模式允許我們對搜尋結果進行順序訪問，而不需要暴露搜尋邏輯的細節。</p>

<p>先來看一下 Iterator Pattern 的 UML：</p>

<p><img src="/blog/assets/images/design_pattern_iterator_pattern_uml_2.png" alt="iterator_pattern_uml_2" /></p>

<p>以下是 Iterator Pattern 的主要角色：</p>

<ul>
  <li><strong>Iterator (迭代器介面)</strong>：定義訪問搜尋結果的方法，例如 <code class="language-plaintext highlighter-rouge">hasNext()</code> 和 <code class="language-plaintext highlighter-rouge">next()</code>。</li>
  <li><strong>ConcreteIterator (具體迭代器)</strong>：實現不同的搜尋邏輯，如 BFS 或 DFS。</li>
  <li><strong>Aggregate (聚合介面)</strong>：定義方法來創建迭代器。</li>
  <li><strong>ConcreteAggregate (具體聚合類別)</strong>：實現聚合介面，提供檔案系統資料的具體實現。</li>
</ul>

<p>將 Iterator Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_iterator_pattern_uml_3.png" alt="iterator_pattern_uml_3" /></p>

<h2 id="物件導向程式設計-oop">物件導向程式設計 (OOP)</h2>

<p>[Iterator]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Iterator</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">hasNext</span><span class="p">():</span> <span class="nc">Boolean</span>
    <span class="k">fun</span> <span class="nf">next</span><span class="p">():</span> <span class="nc">T</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Aggregate: FileSystem]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">FileSystem</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">createIterator</span><span class="p">():</span> <span class="nc">Iterator</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteIterator: BFSIterator, DFSIterator]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BFSIterator</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">root</span><span class="p">:</span> <span class="nc">File</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Iterator</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">queue</span> <span class="p">=</span> <span class="nc">ArrayDeque</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;()</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="n">queue</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">hasNext</span><span class="p">():</span> <span class="nc">Boolean</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">queue</span><span class="p">.</span><span class="nf">isNotEmpty</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">next</span><span class="p">():</span> <span class="nc">File</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="nf">hasNext</span><span class="p">())</span> <span class="k">throw</span> <span class="nc">NoSuchElementException</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">current</span> <span class="p">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">removeFirst</span><span class="p">()</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">isDirectory</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">queue</span><span class="p">.</span><span class="nf">addAll</span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="nf">listFiles</span><span class="p">().</span><span class="nf">orEmpty</span><span class="p">())</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">current</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">DFSIterator</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">root</span><span class="p">:</span> <span class="nc">File</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Iterator</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">stack</span> <span class="p">=</span> <span class="nc">ArrayDeque</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;()</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">hasNext</span><span class="p">():</span> <span class="nc">Boolean</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">stack</span><span class="p">.</span><span class="nf">isNotEmpty</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">next</span><span class="p">():</span> <span class="nc">File</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="nf">hasNext</span><span class="p">())</span> <span class="k">throw</span> <span class="nc">NoSuchElementException</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">current</span> <span class="p">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">removeLast</span><span class="p">()</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">isDirectory</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">addAll</span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="nf">listFiles</span><span class="p">().</span><span class="nf">orEmpty</span><span class="p">())</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">current</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteAggregate: DefaultFileSystem]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">DefaultFileSystem</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">root</span><span class="p">:</span> <span class="nc">File</span><span class="p">,</span> <span class="k">private</span> <span class="kd">val</span> <span class="py">searchMethod</span><span class="p">:</span> <span class="nc">SearchMethod</span><span class="p">)</span> <span class="p">:</span> <span class="nc">FileSystem</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">createIterator</span><span class="p">():</span> <span class="nc">Iterator</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">searchMethod</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">SearchMethod</span><span class="p">.</span><span class="nc">BFS</span> <span class="p">-&gt;</span> <span class="nc">BFSIterator</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="nc">SearchMethod</span><span class="p">.</span><span class="nc">DFS</span> <span class="p">-&gt;</span> <span class="nc">DFSIterator</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">enum</span> <span class="kd">class</span> <span class="nc">SearchMethod</span> <span class="p">{</span>
    <span class="nc">BFS</span><span class="p">,</span> <span class="nc">DFS</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[File]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">File</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">isDirectory</span><span class="p">:</span> <span class="nc">Boolean</span><span class="p">,</span> <span class="kd">val</span> <span class="py">children</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">emptyList</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">listFiles</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">File</span><span class="p">&gt;</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isDirectory</span><span class="p">)</span> <span class="n">children</span> <span class="k">else</span> <span class="nf">emptyList</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">fileSystem</span> <span class="p">=</span> <span class="nc">DefaultFileSystem</span><span class="p">(</span>
        <span class="n">root</span> <span class="p">=</span> <span class="nc">File</span><span class="p">(</span>
            <span class="n">name</span> <span class="p">=</span> <span class="s">"root"</span><span class="p">,</span>
            <span class="n">isDirectory</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
            <span class="n">children</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(</span>
                <span class="nc">File</span><span class="p">(</span><span class="s">"file1.txt"</span><span class="p">,</span> <span class="k">false</span><span class="p">),</span>
                <span class="nc">File</span><span class="p">(</span><span class="s">"folder1"</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="nf">listOf</span><span class="p">(</span>
                    <span class="nc">File</span><span class="p">(</span><span class="s">"file2.txt"</span><span class="p">,</span> <span class="k">false</span><span class="p">),</span>
                    <span class="nc">File</span><span class="p">(</span><span class="s">"file3.txt"</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
                <span class="p">)),</span>
                <span class="nc">File</span><span class="p">(</span><span class="s">"folder2"</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="nf">listOf</span><span class="p">(</span>
                    <span class="nc">File</span><span class="p">(</span><span class="s">"file4.txt"</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
                <span class="p">))</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="n">searchMethod</span> <span class="p">=</span> <span class="nc">SearchMethod</span><span class="p">.</span><span class="nc">BFS</span>
    <span class="p">)</span>

    <span class="kd">val</span> <span class="py">iterator</span> <span class="p">=</span> <span class="n">fileSystem</span><span class="p">.</span><span class="nf">createIterator</span><span class="p">()</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Files:"</span><span class="p">)</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="nf">hasNext</span><span class="p">())</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"- ${iterator.next().name}"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Files:
- root
- file1.txt
- folder1
- folder2
- file2.txt
- file3.txt
- file4.txt
</code></pre></div></div>

<h2 id="結論">結論</h2>

<p>透過 Iterator Pattern，我們成功實現了不同搜尋法的整合，讓客戶端能以一致的方式訪問搜尋結果。此模式提升了系統的靈活性與擴展性，特別適合處理多種遍歷邏輯的場景，例如檔案搜尋、樹狀結構遍歷等。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Iterator Pattern" /><summary type="html"><![CDATA[了解迭代器模式如何提供一種順序來訪問集合內元素的方法，而不需要暴露集合的底層表示。]]></summary></entry><entry><title type="html">Design Pattern (21) - Mediator Pattern (中介者模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-21-mediator-pattern/" rel="alternate" type="text/html" title="Design Pattern (21) - Mediator Pattern (中介者模式)" /><published>2024-12-22T06:00:00+00:00</published><updated>2024-12-22T06:00:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-21-mediator-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-21-mediator-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<h2 id="需求">需求</h2>

<p>我們的任務是設計一個 <strong>聊天室應用程式</strong>，需求如下：</p>

<ul>
  <li>使用者可以透過聊天室傳遞訊息。</li>
  <li>每個使用者都不需要直接管理其他使用者的資訊。</li>
  <li>新增或移除使用者不應影響其他使用者的運作。</li>
</ul>

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，我們來快速分析：</p>

<ul>
  <li>若使用者彼此直接通信，會導致複雜的相依關係，增加維護成本。</li>
  <li>我們需要一個集中管理的角色，來協調使用者之間的訊息傳遞。</li>
</ul>

<p><img src="/blog/assets/images/design_pattern_mediator_pattern_uml_1.png" alt="mediator_pattern_uml_1" /></p>

<h2 id="察覺-forces">察覺 Forces</h2>

<p>在未使用設計模式的情況下，我們可能面臨以下挑戰：</p>

<ol>
  <li>
    <p><strong>高耦合性 (High Coupling)</strong>：</p>

    <ul>
      <li>使用者彼此之間直接通信，導致新增或移除使用者時需修改多處程式碼。</li>
    </ul>
  </li>
  <li>
    <p><strong>難以擴展 (Hard to Extend)</strong>：</p>

    <ul>
      <li>若要增加新功能（如訊息過濾或廣播機制），需要修改多個使用者的邏輯。</li>
    </ul>
  </li>
  <li>
    <p><strong>複雜度上升 (Increased Complexity)</strong>：</p>

    <ul>
      <li>使用者之間的關聯數量隨著使用者數量增長呈指數級增加。</li>
    </ul>
  </li>
</ol>

<h2 id="套用-mediator-pattern-solution-得到新的-context-resulting-context">套用 Mediator Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Mediator Pattern 解決這個問題。</p>

<p>中介者模式引入了一個中介者來負責協調使用者之間的交互。使用者只需與中介者通信，從而降低相互之間的耦合性。</p>

<p>以下是 Mediator Pattern 的 UML 圖：</p>

<p><img src="/blog/assets/images/design_pattern_mediator_pattern_uml_2.png" alt="mediator_pattern_uml_2" /></p>

<p>Mediator Pattern 的主要角色：</p>

<ul>
  <li><strong>Mediator (中介者介面)</strong>：定義協調參與者的方法，例如傳遞訊息。</li>
  <li><strong>ConcreteMediator (具體中介者)</strong>：實現中介者的行為，處理使用者之間的訊息傳遞。</li>
  <li><strong>Colleague (同事類別)</strong>：表示參與者，所有訊息均通過中介者進行傳遞。</li>
  <li><strong>ConcreteColleague (具體同事類別)</strong>：實現具體參與者的行為，並依賴中介者進行通信。</li>
</ul>

<p>讓我們將 Mediator Pattern 套用到聊天室應用程式中。</p>

<p><img src="/blog/assets/images/design_pattern_mediator_pattern_uml_3.png" alt="mediator_pattern_uml_3" /></p>

<h2 id="物件導向程式設計-oop">物件導向程式設計 (OOP)</h2>

<p>[Mediator]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ChatMediator</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">sendMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">addUser</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteMediator]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ChatRoomMediator</span> <span class="p">:</span> <span class="nc">ChatMediator</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">users</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;()</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">sendMessage</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">users</span><span class="p">.</span><span class="nf">filter</span> <span class="p">{</span> <span class="n">it</span> <span class="p">!=</span> <span class="n">user</span> <span class="p">}.</span><span class="nf">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="nf">receive</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">addUser</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">users</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Colleague]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="kd">class</span> <span class="nc">User</span><span class="p">(</span><span class="k">protected</span> <span class="kd">val</span> <span class="py">mediator</span><span class="p">:</span> <span class="nc">ChatMediator</span><span class="p">,</span> <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">send</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span>
    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">receive</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[ConcreteColleague]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ChatUser</span><span class="p">(</span><span class="n">mediator</span><span class="p">:</span> <span class="nc">ChatMediator</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">:</span> <span class="nc">User</span><span class="p">(</span><span class="n">mediator</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">send</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"$name 發送訊息：$message"</span><span class="p">)</span>
        <span class="n">mediator</span><span class="p">.</span><span class="nf">sendMessage</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">receive</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"$name 收到訊息：$message"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Client]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">chatMediator</span> <span class="p">=</span> <span class="nc">ChatRoomMediator</span><span class="p">()</span>

    <span class="kd">val</span> <span class="py">user1</span> <span class="p">=</span> <span class="nc">ChatUser</span><span class="p">(</span><span class="n">chatMediator</span><span class="p">,</span> <span class="s">"Alice"</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">user2</span> <span class="p">=</span> <span class="nc">ChatUser</span><span class="p">(</span><span class="n">chatMediator</span><span class="p">,</span> <span class="s">"Bob"</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">user3</span> <span class="p">=</span> <span class="nc">ChatUser</span><span class="p">(</span><span class="n">chatMediator</span><span class="p">,</span> <span class="s">"Charlie"</span><span class="p">)</span>

    <span class="n">chatMediator</span><span class="p">.</span><span class="nf">addUser</span><span class="p">(</span><span class="n">user1</span><span class="p">)</span>
    <span class="n">chatMediator</span><span class="p">.</span><span class="nf">addUser</span><span class="p">(</span><span class="n">user2</span><span class="p">)</span>
    <span class="n">chatMediator</span><span class="p">.</span><span class="nf">addUser</span><span class="p">(</span><span class="n">user3</span><span class="p">)</span>

    <span class="n">user1</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s">"Hello, everyone!"</span><span class="p">)</span>
    <span class="n">user2</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s">"Hi, Alice!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[Output]</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Alice</span> <span class="err">發送訊息：</span><span class="nc">Hello</span><span class="p">,</span> <span class="n">everyone</span><span class="p">!</span>
<span class="nc">Bob</span> <span class="err">收到訊息：</span><span class="nc">Hello</span><span class="p">,</span> <span class="n">everyone</span><span class="p">!</span>
<span class="nc">Charlie</span> <span class="err">收到訊息：</span><span class="nc">Hello</span><span class="p">,</span> <span class="n">everyone</span><span class="p">!</span>
<span class="nc">Bob</span> <span class="err">發送訊息：</span><span class="nc">Hi</span><span class="p">,</span> <span class="nc">Alice</span><span class="p">!</span>
<span class="nc">Alice</span> <span class="err">收到訊息：</span><span class="nc">Hi</span><span class="p">,</span> <span class="nc">Alice</span><span class="p">!</span>
<span class="nc">Charlie</span> <span class="err">收到訊息：</span><span class="nc">Hi</span><span class="p">,</span> <span class="nc">Alice</span><span class="p">!</span>
</code></pre></div></div>

<h2 id="結論">結論</h2>

<p>透過中介者模式，我們成功降低了使用者之間的耦合性，並實現了靈活的訊息傳遞機制。此模式非常適合處理多物件之間的交互，例如聊天室、事件系統或 GUI 組件通信等場景。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Mediator Pattern" /><summary type="html"><![CDATA[了解中介者模式如何協調物件之間的交互，減少物件之間的耦合性並促進系統的可擴展性。]]></summary></entry><entry><title type="html">Design Pattern (22) - Memento Pattern (備忘錄模式)</title><link href="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-22-memento-pattern/" rel="alternate" type="text/html" title="Design Pattern (22) - Memento Pattern (備忘錄模式)" /><published>2024-12-22T06:00:00+00:00</published><updated>2024-12-22T06:00:00+00:00</updated><id>https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-22-memento-pattern</id><content type="html" xml:base="https://nickhuangcyh.github.io/blog/design%20pattern/design-pattern-22-memento-pattern/"><![CDATA[<blockquote>
  <p>您可於此 <a href="https://github.com/nickhuangcyh/design_pattern">design_pattern repo</a> 下載 Design Pattern 系列程式碼。</p>
</blockquote>

<h2 id="需求">需求</h2>

<p>我們的任務是設計一個文字編輯器，需求如下：</p>

<ul>
  <li>使用者可以輸入文字，並隨時按下 <code class="language-plaintext highlighter-rouge">Ctrl+Z</code> 回復上一步。</li>
  <li>系統需要保存歷史狀態以供回復。</li>
  <li>客戶端不需要了解狀態保存的實現細節，只需使用一個簡單的回復操作即可。</li>
</ul>

<h2 id="物件導向分析-ooa">物件導向分析 (OOA)</h2>

<p>理解需求後，讓我們來快速實作物件導向分析吧!</p>

<p><img src="/blog/assets/images/design_pattern_memento_pattern_uml_1.png" alt="memento_pattern_uml_1" /></p>

<h3 id="察覺-forces">察覺 Forces</h3>

<p>在未使用設計模式的情況下，我們可能面臨以下挑戰：</p>

<ol>
  <li>
    <p><strong>資料喪失風險 (Data Loss Risk)</strong>：</p>

    <ul>
      <li>如果我們僅保留當前狀態，將無法回復到之前的狀態。</li>
    </ul>
  </li>
  <li>
    <p><strong>高耦合性 (High Coupling)</strong>：</p>

    <ul>
      <li>客戶端需要直接操作狀態管理邏輯，導致複雜性增加。</li>
    </ul>
  </li>
  <li>
    <p><strong>難以擴展 (Hard to Extend)</strong>：</p>

    <ul>
      <li>新增功能或改變狀態保存方式時，可能需要修改大量程式碼。</li>
    </ul>
  </li>
</ol>

<h2 id="套用-memento-pattern-solution-得到新的-context-resulting-context">套用 Memento Pattern (Solution) 得到新的 Context (Resulting Context)</h2>

<p>做完 OOA，察覺 Forces，看清楚整個 Context 後，就可以來套用 Memento Pattern 解決這個問題</p>

<p>先來看一下 Memento Pattern 的 UML</p>

<p><img src="/blog/assets/images/design_pattern_memento_pattern_uml_2.png" alt="memento_pattern_uml_2" /></p>

<p>備忘錄模式引入了三個角色：</p>

<ol>
  <li><strong>Originator (發起者)</strong>：保存當前狀態到備忘錄，或從備忘錄中恢復狀態。</li>
  <li><strong>Memento (備忘錄)</strong>：存儲 Originator 的內部狀態。</li>
  <li><strong>Caretaker (管理者)</strong>：負責保存和恢復備忘錄，但不直接操作其內容。</li>
</ol>

<p>將 Memento Pattern 套用到我們的應用吧</p>

<p><img src="/blog/assets/images/design_pattern_memento_pattern_uml_3.png" alt="memento_pattern_uml_3" /></p>

<h2 id="物件導向程式設計-oop">物件導向程式設計 (OOP)</h2>

<h3 id="originator">Originator</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TextEditor</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">text</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span>

    <span class="k">fun</span> <span class="nf">type</span><span class="p">(</span><span class="n">newText</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">text</span> <span class="p">+=</span> <span class="n">newText</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">getText</span><span class="p">():</span> <span class="nc">String</span> <span class="p">=</span> <span class="n">text</span>

    <span class="k">fun</span> <span class="nf">save</span><span class="p">():</span> <span class="nc">Memento</span> <span class="p">=</span> <span class="nc">Memento</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

    <span class="k">fun</span> <span class="nf">restore</span><span class="p">(</span><span class="n">memento</span><span class="p">:</span> <span class="nc">Memento</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">text</span> <span class="p">=</span> <span class="n">memento</span><span class="p">.</span><span class="nf">getText</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">data class</span> <span class="nc">Memento</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">state</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">fun</span> <span class="nf">getText</span><span class="p">():</span> <span class="nc">String</span> <span class="p">=</span> <span class="n">state</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="caretaker">Caretaker</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">History</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">mementos</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">TextEditor</span><span class="p">.</span><span class="nc">Memento</span><span class="p">&gt;()</span>

    <span class="k">fun</span> <span class="nf">save</span><span class="p">(</span><span class="n">memento</span><span class="p">:</span> <span class="nc">TextEditor</span><span class="p">.</span><span class="nc">Memento</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">mementos</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">memento</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">undo</span><span class="p">():</span> <span class="nc">TextEditor</span><span class="p">.</span><span class="nc">Memento</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">mementos</span><span class="p">.</span><span class="nf">isNotEmpty</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">mementos</span><span class="p">.</span><span class="nf">removeAt</span><span class="p">(</span><span class="n">mementos</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">null</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="client">Client</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">textEditor</span> <span class="p">=</span> <span class="nc">TextEditor</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">history</span> <span class="p">=</span> <span class="nc">History</span><span class="p">()</span>

    <span class="c1">// Typing string</span>
    <span class="n">textEditor</span><span class="p">.</span><span class="nf">type</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
    <span class="n">history</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">textEditor</span><span class="p">.</span><span class="nf">save</span><span class="p">())</span>

    <span class="n">textEditor</span><span class="p">.</span><span class="nf">type</span><span class="p">(</span><span class="s">", World"</span><span class="p">)</span>
    <span class="n">history</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">textEditor</span><span class="p">.</span><span class="nf">save</span><span class="p">())</span>

    <span class="n">textEditor</span><span class="p">.</span><span class="nf">type</span><span class="p">(</span><span class="s">"! This is Memento Pattern."</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Current Text：${textEditor.getText()}"</span><span class="p">)</span> <span class="c1">// Output: Hello, World! This is Memento Pattern.</span>

    <span class="c1">// Pressed Ctrl+Z</span>
    <span class="n">textEditor</span><span class="p">.</span><span class="nf">restore</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="nf">undo</span><span class="p">()</span><span class="o">!!</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Excute undo Text：${textEditor.getText()}"</span><span class="p">)</span> <span class="c1">// Output: Hello, World!</span>

    <span class="c1">// Pressed Ctrl+Z again</span>
    <span class="n">textEditor</span><span class="p">.</span><span class="nf">restore</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="nf">undo</span><span class="p">()</span><span class="o">!!</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"Excute undo Text：${textEditor.getText()}"</span><span class="p">)</span> <span class="c1">// Output: Hello</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="output">Output</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Current Text： Hello, World! This is Memento Pattern.
Excute undo Text： Hello, World!
Excute undo Text： Hello
</code></pre></div></div>

<h2 id="結論">結論</h2>

<p>透過備忘錄模式，我們成功實現了文字編輯器的狀態恢復功能，讓使用者能夠輕鬆地回復到之前的操作狀態。這種模式廣泛應用於文字處理器、遊戲保存系統以及其他需要狀態恢復的場景。</p>]]></content><author><name>Nick Huang</name></author><category term="Design Pattern" /><category term="Memento Pattern" /><summary type="html"><![CDATA[了解備忘錄模式如何幫助我們實現狀態恢復，像是常見的 Ctrl+Z 功能，讓我們回到之前的操作狀態。]]></summary></entry></feed>